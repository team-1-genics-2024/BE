// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique @db.VarChar(100)
  password    String?      @db.VarChar(100)
  name        String       @db.VarChar(100)
  googleId    String?      @unique @db.VarChar(100)
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime     @default(now()) @db.Timestamp(6)
  membership  Membership?
  payments    Payment[]
  enrollments Enrollment[]
  results     Result[]

  @@index([email])
  @@map("users")
}

model Membership {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  endDate   DateTime @default(now()) @db.Timestamp(6)
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("memberships")
}

model Payment {
  id     Int      @id @default(autoincrement())
  method String   @db.VarChar(50)
  amount Float    @db.DoublePrecision
  date   DateTime @default(now()) @db.Timestamp(6)
  userId Int
  user   User     @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Class {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(100)
  description String       @db.Text
  imageUrl    String       @db.Text
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime     @default(now()) @db.Timestamp(6)
  enrollments Enrollment[]
  topics      Topic[]

  @@index([name])
  @@map("classes")
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  userId    Int
  classId   Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("enrollments")
}

model Topic {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(100)
  classId   Int
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime   @default(now()) @db.Timestamp(6)
  class     Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  subtopics Subtopic[]
  results   Result[]

  @@map("topics")
}

model Subtopic {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String   @db.Text
  imageUrl    String   @db.Text
  videoUrl    String   @db.Text
  topicId     Int
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @db.Timestamp(6)
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@map("subtopics")
}

model Quiz {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(100)
  totalMarks Int
  createdAt  DateTime   @default(now()) @db.Timestamp(6)
  updatedAt  DateTime   @default(now()) @db.Timestamp(6)
  questions  Question[]
  results    Result[]

  @@map("quizzes")
}

model Question {
  id         Int      @id @default(autoincrement())
  question   String   @db.Text
  optionA    String   @db.Text
  optionB    String   @db.Text
  optionC    String   @db.Text
  optionD    String   @db.Text
  correctAns String   @db.VarChar(1)
  marks      Int
  quizId     Int
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @db.Timestamp(6)
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Result {
  id        Int      @id @default(autoincrement())
  score     Int
  quizId    Int
  userId    Int
  topicId   Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@map("results")
}
