// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique @db.VarChar(100)
  password     String?        @db.VarChar(100)
  name         String         @db.VarChar(100)
  googleId     String?        @unique @db.VarChar(100)
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  updatedAt    DateTime       @default(now()) @db.Timestamp(6)
  membership   Membership?
  payments     Payment[]
  enrollments  Enrollment[]
  results      Result[]
  ratings      Rating[]
  userProgress UserProgress[]
  Certificate  Certificate[]

  @@index([email])
  @@map("users")
}

model Membership {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  endDate   DateTime @default(now()) @db.Timestamp(6)
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("memberships")
}

model Payment {
  id     String   @id @default(uuid())
  method String?  @db.VarChar(50)
  amount Float    @db.DoublePrecision
  date   DateTime @default(now()) @db.Timestamp(6)
  status String   @default("pending") @db.VarChar(50)
  userId Int
  user   User     @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Class {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  description  String         @db.Text
  imageUrl     String         @db.Text
  rating       Float          @default(0)
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  updatedAt    DateTime       @default(now()) @db.Timestamp(6)
  enrollments  Enrollment[]
  topics       Topic[]
  ratings      Rating[]
  userProgress UserProgress[]
  results      Result[]
  Quiz         Quiz?
  Certificate  Certificate[]

  @@index([name])
  @@map("classes")
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  userId    Int
  classId   Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([userId, classId])
  @@map("enrollments")
}

model Topic {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(100)
  classId   Int
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime   @default(now()) @db.Timestamp(6)
  class     Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  subtopics Subtopic[]

  @@map("topics")
}

model Subtopic {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  description  String         @db.Text
  imageUrl     String         @db.Text
  videoUrl     String         @db.Text
  topicId      Int
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  updatedAt    DateTime       @default(now()) @db.Timestamp(6)
  topic        Topic          @relation(fields: [topicId], references: [id], onDelete: Cascade)
  UserProgress UserProgress[]

  @@map("subtopics")
}

model Quiz {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(100)
  totalMarks Int
  classId    Int        @unique
  createdAt  DateTime   @default(now()) @db.Timestamp(6)
  updatedAt  DateTime   @default(now()) @db.Timestamp(6)
  questions  Question[]
  results    Result[]
  class      Class      @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([classId])
  @@map("quizzes")
}

model Question {
  id         Int      @id @default(autoincrement())
  question   String   @db.Text
  optionA    String   @db.Text
  optionB    String   @db.Text
  optionC    String   @db.Text
  optionD    String   @db.Text
  correctAns String   @db.VarChar(1)
  marks      Int
  quizId     Int
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @db.Timestamp(6)
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@map("questions")
}

model Result {
  id        Int      @id @default(autoincrement())
  score     Int
  quizId    Int
  userId    Int
  classId   Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([userId, classId])
  @@map("results")
}

model Rating {
  id        String   @id @default(uuid())
  rating    Int
  userId    Int
  classId   Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([userId, classId])
  @@map("ratings")
}

model UserProgress {
  id         Int      @id @default(autoincrement())
  userId     Int
  classId    Int
  subtopicId Int
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @db.Timestamp(6)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subtopic   Subtopic @relation(fields: [subtopicId], references: [id], onDelete: Cascade)
  class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([userId, classId])
  @@index([userId, subtopicId])
  @@map("user_progress")
}

model Certificate {
  id        String   @id
  userId    Int
  classId   Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
  @@map("certificates")
}
